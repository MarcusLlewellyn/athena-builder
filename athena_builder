#!/usr/bin/env perl
use warnings;
use strict;

$| = 1;

sub info($) {
	print STDERR shift;
}

sub warning($) {
	print STDERR shift;
}

sub fatal($) {
	print STDERR shift;
	print STDERR "Please notify Dale Glass#8576 on Discord of this problem.";
	exit 1;
}


my $required_packages = {
	'ubuntu' => [
		'libterm-readline-gnu-perl',
		'build-essential',
		'git',
		'make',
		'cmake',
		'python',
		'libdrm-dev',
		'mesa-common-dev',
		'mesa-utils',
		'libglvnd-dev',
		'libgl1-mesa-dev',
		'xdg-user-dirs',
		# Qt
		'libdouble-conversion1', 'libxcb-xinerama0-dev',
		# Interface
		'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
		# Misc
		'libasound2', 'libxmu-dev', 'libxi-dev', 'freeglut3-dev', 'libasound2-dev', 'libjack0', 'libjack-dev', 'libxrandr-dev', 'libudev-dev', 'libssl-dev', 'zlib1g-dev',
		# Server
		'libpulse0', 'libnss3', 'libnspr4', 'libfontconfig1', 'libxcursor1', 'libxcomposite1', 'libxtst6', 'libxslt1.1',
		# Docs
		'nodejs'

	],
	'fedora' => [
		'git',
		'perl-Term-ReadLine-Gnu',
		'cmake',
		'make',
		'gcc-c++'
	]
};

my $repo         = "https://github.com/kasenvr/project-athena";
my $repo_tag     = "kasen/core";
my $inst_dir     = "$ENV{HOME}/Athena";
my $build_cores  = calculate_cores();
my $desktop      = get_desktop();

my $DISTRO = detect_distro();
my %PACKAGES = get_package_list();
install_missing_packages();
collect_info();
install();
setup_desktop();




sub detect_distro {
	info "Detecting distribution... ";

	if ( -f "/etc/fedora-release" ) {
		info "Fedora\n";
		return "fedora";
	}

	if ( -f "/etc/lsb-release" ) {
		my @lsb = readfile("/etc/lsb-release");
		my ($dist) = grep { /^DISTRIB_ID/ } @lsb;
		my ($f, $v) = split(/=/, $dist);
		return lc($v);
	}

	die "Failed to detect distribution!";
}



sub get_package_list {
	info "Getting the package list... ";	
	my @packages;
	if ( $DISTRO eq "fedora" ) {
		@packages = `rpm -qa --qf "%{NAME}\\n"`
	} elsif ( $DISTRO eq "ubuntu" ) {
		@packages = `dpkg-query --show -f "\\\${Package}\n"`
	}

	chomp @packages;

	info "done.\n";
	return map { $_ => 1 } @packages;
}

sub install_missing_packages {
	info "Checking if any packages need installing... ";
	my @missing = grep { !exists $PACKAGES{$_} } @{$required_packages->{$DISTRO}};


	if ( @missing ) {
		print scalar(@missing) . " additional packages needed: " . join(", ", @missing) . "\n";

		if ( $DISTRO eq "fedora" ) {
			sudo_run("dnf", "install", "-y", @missing);
		} elsif ( $DISTRO eq "ubuntu" ) {
			sudo_run("apt-get", "install", "-y", @missing);
		}

		info "\nPackages have been installed, please run $0 again.\n\n";
		exit(0);
	} else {
		print "no.\n";
	}
}

sub collect_info {
	require Term::ReadLine;
	info "\n";
	info "Everything seems to be in order. I am going to ask you some questions now.\n";
	info "The defaults should be just fine. Simply press ENTER to accept the suggested\n";
	info "value.\n\n";

	my $rl = Term::ReadLine->new('athena_setup');
	my $ok = "no";

	while($ok ne "yes") {
		$repo         = $rl->readline("Git repository  : ", $repo);
		$repo_tag     = $rl->readline("Git tag         : ", $repo_tag);
		$inst_dir     = $rl->readline("Installation dir: ", $inst_dir);
		$build_cores  = $rl->readline("CPU cores to use: ", $build_cores);
		info "\n";
		$ok = $rl->readline("If the above is okay, say 'yes' to begin installation: ", "yes");
	}


}

sub install {
	info "\n\n";
	info "############################################################\n";
	info "# Starting installation\n";
	info "############################################################\n";
	info "\n";

	mkdir($inst_dir);
	
	if ( ! -d "$inst_dir/source/.git" ) {
		run("git", "clone", $repo, "$inst_dir/source");
		chdir("$inst_dir/source");

		run("git", "checkout", $repo_tag);
	} else {
		chdir("$inst_dir/source");
		run("git", "fetch");
		run("git", "clean", "-f");
		run("git", "reset", "--hard", $repo_tag);
	}
	

	$ENV{HIFI_VCPKG_BASE} = "$inst_dir/vcpkg";

	if ( -d "$inst_dir/build" ) {
		run("rm", "-rf", "$inst_dir/build");
	}

	mkdir("$inst_dir/build");
	chdir("$inst_dir/build");

	run("cmake", "../source");

	info "\n\n";
	info "############################################################\n";
	info "# Building\n";
	info "############################################################\n";
	info "\n";


	run("make", "interface", "-j${build_cores}");
	

}

sub setup_desktop {
	my $qt_dir = `find "$inst_dir/vcpkg" -type d -name "qt5-install"`;
	chomp $qt_dir;

	if ( -d "$qt_dir" ) {
		info "Creating permanent qt dir... ";
		if ( -d "$inst_dir/qt5-install" ) {
			run("rm", "-rf", "$inst_dir/qt5-install");
		}
		run("cp", "-Rdp", $qt_dir, "$inst_dir/qt5-install");
		
		info "done.\n";
	} else {
		die "Failed to find Qt dir in $inst_dir/vcpkg!";
	}

	open(my $script, ">", "$inst_dir/build/run_interface") or die "Can't create $inst_dir/build/interface: $!";
	print $script "#!/bin/bash\n";
	print $script "export QT_DIR=$inst_dir/qt5-install\n";
	print $script "export QT_QPA_PLATFORM_PLUGIN_PATH=\$QT_DIR/plugins\n";
	print $script "export LD_LIBRARY_PATH=\$QT_DIR/lib:\$LD_LIBRARY_PATH\n";
	print $script "export PATH=\$QT_DIR/bin:\$QT_DIR/libexec:\$PATH\n";
	print $script "export QTWEBENGINEPROCESS_PATH=\$QT_DIR/libexec/QtWebEngineProcess\n";
	print $script "\"$inst_dir/build/interface/interface\" \"\$@\" 2>&1 | tee -a \"$inst_dir/build/interface.log\"\n";
	close $script;
	chmod 0755,  "$inst_dir/build/run_interface";


	open(my $dsk, ">", "$desktop/Athena.desktop") or die "Can't create $desktop/Athena.desktop: $!";
	print $dsk "[Desktop Entry]\n";
	print $dsk "Version=1.0\n";
	print $dsk "Name=Athena VR\n";
	print $dsk "Terminal=false\n";
	print $dsk "Type=Application\n";
	print $dsk "Exec=$inst_dir/build/run_interface\n";
	print $dsk "Icon=$inst_dir/source/interface/icon/interface.ico\n";
	print $dsk "Categories=Graphics;AudioVideo;Network\n";
	close $dsk;
}


sub run {
	my (@command) = @_;
	system(@command) == 0 or die "Failed to run " . join(' ', @command) . ": $?";
}


sub sudo_run {
	my (@command) = @_;

	info "Root privileges are needed to run the following command:\n";
	info "\t" . join(' ', @command) . "\n";
	info "Please enter your password to continue\n\n";

	system("sudo", @command);
}


sub calculate_cores {

	my $mem_per_core = 1 * 1024 * 1024;

	my $core_count =  grep { /^processor/ } readfile("/proc/cpuinfo");
	my ($mem_avail) = grep { /^MemAvailable/ } readfile("/proc/meminfo");

	$mem_avail =~ /:\s*(\d+)/;
	$mem_avail = $1;
	
	my $cores = $core_count;
	if ( $cores >= ($mem_avail / $mem_per_core )) {
		$cores = $mem_avail / $mem_per_core;
	}

	$cores = int($cores);

	$cores = 1 unless ($cores);

	return $cores;
}

sub get_desktop {
	my $desktop = `xdg-user-dir DESKTOP`;
	if (!$desktop) {
		$desktop = "$ENV{HOME}/Desktop";
	}

	chomp $desktop;
	return $desktop;
}


sub readfile {
	my ($file) = @_;
	open(my $fh, $file) or die "Can't open $file: $!";
	my @data = <$fh>;
	chomp @data;
	close $fh;
	return @data;
}
